#!/usr/bin/env python3
"""
Script de configuraci√≥n y demostraci√≥n de WittgenLab.

Este script:
1. Verifica e instala las dependencias necesarias
2. Configura el entorno
3. Ejecuta una demostraci√≥n completa
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path


def print_header():
    """Imprime el header del script."""
    print("üß™ WITTGENLAB - Configuraci√≥n y Demostraci√≥n")
    print("=" * 60)
    print("Configurando el framework de evaluaci√≥n de IA m√°s completo...")
    print("=" * 60)


def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible."""
    print("\nüìã Verificando versi√≥n de Python...")
    
    if sys.version_info < (3, 10):
        print("‚ùå Error: Se requiere Python 3.10 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version.split()[0]} - Compatible")


def check_poetry():
    """Verifica si Poetry est√° instalado."""
    print("\nüì¶ Verificando Poetry...")
    
    try:
        result = subprocess.run(['poetry', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ö†Ô∏è  Poetry no encontrado")
    print("   Instalando Poetry...")
    
    try:
        # Instalar Poetry usando el instalador oficial
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', 'poetry'
        ], check=True)
        print("‚úÖ Poetry instalado correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error al instalar Poetry")
        return False


def install_dependencies():
    """Instala las dependencias del proyecto."""
    print("\nüìö Instalando dependencias...")
    
    try:
        # Instalar dependencias b√°sicas con Poetry
        print("   Instalando dependencias b√°sicas...")
        subprocess.run(['poetry', 'install'], check=True, cwd='.')
        
        # Instalar dependencias adicionales para la demo
        additional_deps = [
            'bert-score>=0.3.13',
            'langchain>=0.1.0',
            'langchain-openai>=0.1.0',
            'pydantic>=2.0.0'
        ]
        
        print("   Instalando dependencias adicionales...")
        for dep in additional_deps:
            subprocess.run([
                'poetry', 'add', dep
            ], check=True, cwd='.')
        
        print("‚úÖ Dependencias instaladas correctamente")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar dependencias: {e}")
        return False


def check_imports():
    """Verifica que las importaciones principales funcionen."""
    print("\nüîç Verificando importaciones...")
    
    imports_to_check = [
        ('wittgenlab', 'EvalHub y configuraci√≥n b√°sica'),
        ('bert_score', 'BERTScore para evaluaci√≥n sem√°ntica'),
        ('langchain', 'LangChain para LLM-as-a-Judge'),
        ('pydantic', 'Pydantic para validaci√≥n de datos')
    ]
    
    all_good = True
    
    for module_name, description in imports_to_check:
        try:
            # Agregar src al path para wittgenlab
            if module_name == 'wittgenlab':
                sys.path.insert(0, str(Path('.') / 'src'))
            
            importlib.import_module(module_name)
            print(f"   ‚úÖ {module_name:15} - {description}")
        except ImportError as e:
            print(f"   ‚ùå {module_name:15} - Error: {e}")
            all_good = False
    
    return all_good


def setup_api_keys():
    """Gu√≠a al usuario para configurar las API keys."""
    print("\nüîë Configuraci√≥n de API Keys")
    print("-" * 40)
    
    # Verificar OpenAI API Key
    if not os.environ.get('OPENAI_API_KEY'):
        print("‚ö†Ô∏è  OPENAI_API_KEY no configurada")
        print("   Para usar LLM-as-a-Judge necesitas configurar tu API key de OpenAI:")
        print("   1. Obt√©n tu API key en: https://platform.openai.com/api-keys")
        print("   2. Config√∫rala con: export OPENAI_API_KEY='tu-api-key-aqu√≠'")
        print("   3. O agr√©gala al archivo .env en el directorio del proyecto")
        
        # Intentar cargar desde .env si existe
        env_file = Path('.env')
        if env_file.exists():
            print("   üìÑ Archivo .env encontrado - cargando variables...")
            with open(env_file) as f:
                for line in f:
                    if line.startswith('OPENAI_API_KEY='):
                        key = line.split('=', 1)[1].strip().strip('"\'')
                        os.environ['OPENAI_API_KEY'] = key
                        print("   ‚úÖ OPENAI_API_KEY cargada desde .env")
                        break
        
        return False
    else:
        print("‚úÖ OPENAI_API_KEY configurada")
        return True


def run_basic_test():
    """Ejecuta un test b√°sico del framework."""
    print("\nüß™ Ejecutando test b√°sico...")
    
    try:
        # Importar y probar funcionalidad b√°sica
        sys.path.insert(0, str(Path('.') / 'src'))
        from wittgenlab import EvalHub
        
        evaluator = EvalHub()
        
        # Test b√°sico de m√©tricas
        predictions = ["El gato est√° en el tejado."]
        references = ["Un gato se encuentra sobre el techo."]
        
        # Probar m√©tricas b√°sicas
        try:
            results = evaluator.evaluate(
                predictions=predictions,
                references=references,
                metrics=['bleu', 'rouge'],
                task='test'
            )
            print("   ‚úÖ M√©tricas b√°sicas funcionando")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  M√©tricas b√°sicas: {e}")
        
        # Probar BERTScore si est√° disponible
        try:
            bertscore_results = evaluator.evaluate(
                predictions=predictions,
                references=references,
                metrics=['bertscore'],
                task='test'
            )
            print("   ‚úÖ BERTScore funcionando")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  BERTScore: {e}")
        
        # Probar LLM Judge si API key est√° disponible
        if os.environ.get('OPENAI_API_KEY'):
            try:
                from wittgenlab.judges import create_judge
                judge = create_judge(model_name="gpt-4o-mini")
                print("   ‚úÖ LLM Judge configurado")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  LLM Judge: {e}")
        
        print("‚úÖ Test b√°sico completado")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test b√°sico: {e}")
        return False


def run_complete_demo():
    """Ejecuta la demostraci√≥n completa."""
    print("\nüöÄ Ejecutando demostraci√≥n completa...")
    print("   Esto puede tomar unos minutos...")
    
    try:
        # Ejecutar el script de demostraci√≥n
        demo_script = Path('examples') / 'complete_demo.py'
        
        if demo_script.exists():
            subprocess.run([sys.executable, str(demo_script)], check=True)
            print("‚úÖ Demostraci√≥n completa ejecutada")
            return True
        else:
            print("‚ùå Script de demostraci√≥n no encontrado")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar demostraci√≥n: {e}")
        return False


def print_next_steps():
    """Imprime los pr√≥ximos pasos para el usuario."""
    print("\nüéØ PR√ìXIMOS PASOS")
    print("=" * 60)
    print("1. üìñ Lee la documentaci√≥n en README.md")
    print("2. üîß Configura tu OPENAI_API_KEY para usar LLM-as-a-Judge")
    print("3. üéÆ Ejecuta los ejemplos:")
    print("   ‚Ä¢ python examples/basic_usage.py")
    print("   ‚Ä¢ python examples/advanced_usage.py")
    print("   ‚Ä¢ python examples/complete_demo.py")
    print("4. üöÄ Adapta los ejemplos a tus propios datos")
    print("5. üìä Explora m√©tricas adicionales y benchmarks")
    print("")
    print("üí° CONSEJOS:")
    print("   ‚Ä¢ Usa 'poetry shell' para activar el entorno virtual")
    print("   ‚Ä¢ Configura el archivo .env con tus API keys")
    print("   ‚Ä¢ Revisa examples/ para m√°s casos de uso")
    print("")
    print("üÜò AYUDA:")
    print("   ‚Ä¢ GitHub: https://github.com/Robert-Gomez-AI/wittgenlab")
    print("   ‚Ä¢ Email: robertgomez.datascience@gmail.com")


def main():
    """Funci√≥n principal del script de configuraci√≥n."""
    print_header()
    
    # Paso 1: Verificar Python
    check_python_version()
    
    # Paso 2: Verificar/Instalar Poetry
    if not check_poetry():
        print("‚ùå No se pudo configurar Poetry. Saliendo...")
        sys.exit(1)
    
    # Paso 3: Instalar dependencias
    if not install_dependencies():
        print("‚ùå No se pudieron instalar las dependencias. Saliendo...")
        sys.exit(1)
    
    # Paso 4: Verificar importaciones
    if not check_imports():
        print("‚ö†Ô∏è  Algunas importaciones fallaron, pero continuando...")
    
    # Paso 5: Configurar API keys
    api_keys_ok = setup_api_keys()
    
    # Paso 6: Test b√°sico
    if not run_basic_test():
        print("‚ö†Ô∏è  Test b√°sico fall√≥, pero la instalaci√≥n puede estar bien")
    
    # Paso 7: Demostraci√≥n completa (opcional)
    print("\n‚ùì ¬øEjecutar demostraci√≥n completa? (s/N): ", end="")
    response = input().lower().strip()
    
    if response in ['s', 'si', 'y', 'yes']:
        run_complete_demo()
    else:
        print("   Saltando demostraci√≥n completa")
    
    # Paso 8: Pr√≥ximos pasos
    print_next_steps()
    
    print("\nüéâ ¬°Configuraci√≥n completada!")
    print("WittgenLab est√° listo para usar. ¬°Disfruta evaluando tus modelos!")


if __name__ == "__main__":
    main() 